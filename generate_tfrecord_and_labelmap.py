import io
import xml.etree.ElementTree as ET
from collections import namedtuple
from pathlib import Path

import pandas as pd
import tensorflow as tf
from PIL import Image

flags = tf.app.flags
flags.DEFINE_string('img_dir', '', 'Path to images')
flags.DEFINE_string('xml_dir', '', 'Path to the XML files')
flags.DEFINE_string('output_labelmap', '', 'Path to output labelmap')
flags.DEFINE_string('output_tfrecord', '', 'Path to output TFRecord')
FLAGS = flags.FLAGS


#######################################################################################
#
# Tensorflow helpers
#
#######################################################################################

def int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))


def int64_list_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=value))


def bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))


def bytes_list_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))


def float_list_feature(value):
    return tf.train.Feature(float_list=tf.train.FloatList(value=value))


#######################################################################################
#
# Label map
#
#######################################################################################

def get_xmls(xmls_dir):
    """Get all xml filenames frmo a directory.

    Args:
        xmls_dir (str): Directory containing the xml files.

    Returns:
        list[str]: List of strings with the XML filenames.

    """
    return Path(xmls_dir).glob("*.xml")


def get_unique_classes(xmls):
    """Iterates through all .xml files and gets a list of unique classes.

    Args:
        path (list[str]): List of XML file names.

    Returns:
        list: List of unique classes.

    """
    list_xml = []
    for filename in xmls:
        tree = ET.parse(filename)
        root = tree.getroot()
        for member in root.findall('object'):
            value = (root.find('filename').text, member[0].text)
            list_xml.append(value)

    # Class names
    name_classes = list(zip(*list_xml))[1]

    # Return unique names sorted alphabetically
    return sorted(list(set(name_classes)))


def assign_unique_ids(unique_classes):
    """Assign unique ids to each of the unique classes in unique_classes.

    First class starts at 0.

    Args:
        unique_classes (list[str]): List of class names.

    Returns:
        list: List of ids.

    """
    return list(range(1, len(unique_classes) + 1))


def create_classes_dict(unique_classes, unique_ids):
    """Creates a dictionary with all the classes and their ids.

    Args:
        unique_classes (list[str]): List of class names.
        unique_ids (list[int]): List of corresponding ids.

    Returns:
        dict: Class names are the keys and ids are the values.

    """
    return dict(zip(unique_classes, unique_ids))


def create_single_entry_label_map(class_name, id):
    """Creates a single entry in a label map in pbtxt format.

    Args:
        class_name (str): Name of the class.
        id (int): Id number to write in the label map cell.

    Returns:

    """
    # string = f"item\n{{\n\tid: {id}\n\tname: {class_name}\n}}"

    cell = """item {{\n\tid: {}\n\tname: '{}'\n}}""".format(id, class_name)

    return cell


def create_label_map(classes_dict):
    """Creates a label map in pbtxt format given a dictionary of class names/ids pairs.

    Args:
        classes_dict (dict). Keys are class names, values are their corresponding ids.

    Returns:
        str: Strings corresponding to the label map.

    """
    cells = []
    for k, v in classes_dict.items():
        cells.append(create_single_entry_label_map(k, v))

    # Add blank line between each cell in label map
    return "\n\n".join(cells) + "\n"


def write_label_map(label_map_string, output_file):
    """Writes a string containing the label on disk.

    Args:
        label_mal_string (str): Label map in a correctly formatted string.
        output_file (str): File where to write the label map.

    """
    with open(output_file, "w") as f:
        f.write(label_map_string)


#######################################################################################
#
# Tfrecord
#
#######################################################################################

def xml_to_csv(xmls_dir):
    """Iterates through all .xml files (generated by labelImg) in a given directory and
    combines them into a single Pandas dataframe.

    Args:
        xml_dir (str): The path containing the .xml files

    Returns:
        str: Path to the csv

    """
    xml_list = []
    for xml_file in get_xmls(xmls_dir):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall('object'):
            value = (root.find('filename').text,
                     int(root.find('size')[0].text),
                     int(root.find('size')[1].text),
                     member[0].text,
                     int(member[4][0].text),
                     int(member[4][1].text),
                     int(member[4][2].text),
                     int(member[4][3].text)
                     )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)

    return xml_df


def class_text_to_int(row_label, classes_dict):
    """

    Args:
        row_label (str): A class name.
        classes_dict (dict): Dictionary with all class names and their corresponding ids.

    Returns:
        int or None: Id of row_label. Returns None if row_label is not in classes_dict.

    """
    return classes_dict.get(row_label)


def split(df, group):
    data = namedtuple('data', ['filename', 'object'])
    gb = df.groupby(group)
    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


def create_tf_example(group, path, classes_dict):
    with tf.io.gfile.GFile(str(Path(path) / '{}'.format(group.filename)), 'rb') as fid:
        encoded_jpg = fid.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)
    image = Image.open(encoded_jpg_io)
    width, height = image.size

    filename = group.filename.encode('utf8')
    image_format = b'jpg'
    # check if the image format is matching with your images.
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in group.object.iterrows():
        xmins.append(row['xmin'] / width)
        xmaxs.append(row['xmax'] / width)
        ymins.append(row['ymin'] / height)
        ymaxs.append(row['ymax'] / height)
        classes_text.append(row['class'].encode('utf8'))
        classes.append(class_text_to_int(row['class'], classes_dict))

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': int64_feature(height),
        'image/width': int64_feature(width),
        'image/filename': bytes_feature(filename),
        'image/source_id': bytes_feature(filename),
        'image/encoded': bytes_feature(encoded_jpg),
        'image/format': bytes_feature(image_format),
        'image/object/bbox/xmin': float_list_feature(xmins),
        'image/object/bbox/xmax': float_list_feature(xmaxs),
        'image/object/bbox/ymin': float_list_feature(ymins),
        'image/object/bbox/ymax': float_list_feature(ymaxs),
        'image/object/class/text': bytes_list_feature(classes_text),
        'image/object/class/label': int64_list_feature(classes),
    }))

    return tf_example


def main(_):
    """Main function that reads creates the label map and the tfrecord from xmls and images."""

    # If flag xml_dir is missing, use img_dir
    # This assumes that images and xmls are in the same directory
    if FLAGS.xml_dir == "":
        FLAGS.xml_dir = FLAGS.img_dir

    # Create and write label map if it doesn't exist
    xmls = get_xmls(FLAGS.xml_dir)
    unique_classes = get_unique_classes(xmls)
    unique_ids = assign_unique_ids(unique_classes)
    classes_dict = create_classes_dict(unique_classes, unique_ids)
    label_map_string = create_label_map(classes_dict)
    if not Path(FLAGS.output_labelmap).is_file():
        write_label_map(label_map_string, FLAGS.output_labelmap)

    # Create and write tfrecord
    writer = tf.io.TFRecordWriter(FLAGS.output_tfrecord)
    path = Path.cwd() / FLAGS.img_dir
    # Create dataframe
    xml_df = xml_to_csv(FLAGS.xml_dir)
    grouped = split(xml_df, 'filename')
    for group in grouped:
        tf_example = create_tf_example(group, path, classes_dict)
        writer.write(tf_example.SerializeToString())

    writer.close()
    print("Successfully created the TFRecords and labelmap!")


if __name__ == '__main__':
    tf.compat.v1.app.run()
